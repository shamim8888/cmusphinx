* Reduce elastic window size by splitting silences - DONE
* Sort entries before window_sf and track start frames - DONE
* Split fwdtree and fwdflat from ngram_search - DONE
* Give fwdflat its own bptbl - DONE
* Figure out bscorestack problems - DONE (apparently)

* Split bptbl into active and retired - DONE (hell yeah)
  - Retire bps to separate table - DONE
    * Partition the permute array into retired and active indices - DONE
    * Switch dest to the retired table in bptbl_compact - DONE
    * Do bp remapping in two parts again - DONE
  - Retire all remaining bps at end of utterance - DONE
  - Pull end frame finding into bptbl - DONE
  - Backtraces and lattice gen then refer to the retired portion - DONE
  - Test this on standalone fwdtree first - DONE

* Work these algorithms out on paper, ugh

* Add ability to pull from previous bptbl to fwdflat search

  - fwdflat step algorithm version 1:
    * input_bptbl->oldest_bp's exit frame is the last start frame that
      won't get any more arcs
      - record this frame + 1 as next_input_sf
      - count bps from input_next_bp up to the first bp exiting in
        next_input_sf -> next_input_next_bp
      - Extend sf_idx, arcs as needed
      - count number of bps per new sf, add to sf_idx, simultaneously
        + Append new bps to arc array at sf_idx
        + arc array is just (wid, sf, ef), scores don't matter (for now)
      - update bptbl->input_next_bp to next_input_next_bp
    * If frame_idx doesn't have a sufficient window:
      + Update word index for all available frames
      + Update last_sf
    * While frame_idx has a sufficient window:
      + Expire word index for previous frame
      + Update word index for current frame
      + Do one frame of search
      + Increment frame_idx
      + Incrememt last_sf

* Rewrite lattice generation to be incremental on retired bps
  - No problem with doing this
  - oldest_bp represents the last node which is still generating arcs
  - current code basically does selection sort
  - makes more sense to radix sort them by start frame
    * this is what fwdflat expects
    * radix sort by frame, insertion sort by word id
    * lattice generation is now very, very easy
    * count start frames in retirement process

* Replace bptbl arrays with ring queues
