# Configuration script for sphinx trainer                  -*-mode:Perl-*-

$CFG_VERBOSE = 1;		# Determines how much goes to the screen.

# These are filled in at configuration time
$CFG_DB_NAME = '___DB_NAME___';
$CFG_BASE_DIR = '___BASE_DIR___';
$CFG_SPHINXTRAIN_DIR = '___SPHINXTRAIN_DIR___';

$CFG_BIN_DIR = "$CFG_BASE_DIR/bin";
$CFG_GIF_DIR = "$CFG_BASE_DIR/gifs";
$CFG_SCRIPT_DIR = "$CFG_BASE_DIR/scripts_pl";

$CFG_EXPTNAME = "$CFG_DB_NAME";
$CFG_JOBNAME  = "$CFG_DB_NAME"."_job";
$CFG_FEATFILES_DIR = "$CFG_BASE_DIR/feat";
$CFG_FEATFILE_EXTENSION = 'mfc';
$CFG_VECTOR_LENGTH = 13;
$CFG_MIN_ITERATIONS = 7;  # BW Iterate at least this many times
$CFG_MAX_ITERATIONS = 30; # BW Don't iterate more than this, somethings likely wrong.
$CFG_AGC = 'none';
$CFG_CMN = 'current';
$CFG_VARNORM = 'no';
$CFG_GENDER = 'g';
$CFG_USE_LSF = 0;
$CFG_LSF_MACHINES = 'processc processf processg processh processi processj processk processl processm processn processo processp';

$CFG_SCRIPT_DIR = "$CFG_BASE_DIR/scripts_pl";
$CFG_QMGR_DIR = "$CFG_BASE_DIR/qmanager";
$CFG_LOG_DIR = "$CFG_BASE_DIR/logdir";
$CFG_BWACCUM_DIR = "$CFG_BASE_DIR/bwaccumdir";
$CFG_MODEL_DIR = "$CFG_BASE_DIR/model_parameters";

#*******variables used in main training of 3st. models*******
$CFG_DICTIONARY     = "$CFG_BASE_DIR/etc/"."$CFG_DB_NAME".".dic";
$CFG_RAWPHONEFILE   = "$CFG_BASE_DIR/etc/"."$CFG_DB_NAME".".phone";
$CFG_FILLERDICT     = "$CFG_BASE_DIR/etc/"."$CFG_DB_NAME".".filler";
$CFG_LISTOFFILES    = "$CFG_BASE_DIR/etc/"."$CFG_DB_NAME".".fileids";
$CFG_TRANSCRIPTFILE = "$CFG_BASE_DIR/etc/"."$CFG_DB_NAME".".transcription";

#*******variables used in main training of 3st. models*******

#$CFG_HMM_TYPE = '.cont.'; # Sphinx III
$CFG_HMM_TYPE  = '.semi.'; # Sphinx II

if (($CFG_HMM_TYPE ne ".semi.") and ($CFG_HMM_TYPE ne ".cont.")) {
  die "Please choose one CFG_HMM_TYPE out of '.cont.' or '.semi.', " .
    "currently $CFG_HMM_TYPE\n";
}


if ($CFG_HMM_TYPE eq '.semi.') {
  $CFG_DIRLABEL = 'semi';
  $CFG_STATESPERHMM = 5;
  $CFG_SKIPSTATE = 'yes';
# Four (4) stream features for Sphinx II
  $CFG_FEATURE = "c/1..L-1/,d/1..L-1/,c/0/d/0/dd/0/,dd/1..L-1/";
  $CFG_NUM_STREAMS = 4;
  $CFG_NUM_DENSITIES = 256;
} elsif ($CFG_HMM_TYPE eq '.cont.') {
  $CFG_DIRLABEL = 'cont';
  $CFG_STATESPERHMM = 3;
  $CFG_SKIPSTATE = 'no';
# Single stream features - Sphinx 3
  $CFG_FEATURE = "1s_c_d_dd";
  $CFG_NUM_STREAMS = 1;
  $CFG_NUM_DENSITIES = 1;
}

$CFG_N_TIED_STATES = 6000;
$CFG_NITER = 10;

#$MC=1;                         #  uncomment if you want to use many machines
                                #  and you'll need an etc/mc_config
                                #  and increase CFG_NPART
$CFG_NPART = 1;			#  Define how many pieces to run baum welch in

$CFG_FORCEDALIGN = 'no';

#set convergence_ratio = 0.004
$CFG_CONVERGENCE_RATIO = 0.04;

$CFG_QPRIORITY = "priority";	# Not supported on this release

$CFG_QUESTION_SET = "${CFG_BASE_DIR}/model_architecture/${CFG_EXPTNAME}.tree_questions";
#$CFG_QUESTION_SET = "${CFG_BASE_DIR}/linguistic_questions";

$CFG_CP_OPERATION = "${CFG_BASE_DIR}/model_architecture/${CFG_EXPTNAME}.cpmeanvar";

$CFG_OKAY_COLOR = '00D000';
$CFG_WARNING_COLOR = '555500';
$CFG_ERROR_COLOR = 'DD0000';

sub ST_DateStr()
{
    my (@time) = localtime(time());
    my ($day_str) = sprintf ("%4d-%02d-%02d %02d:%02d",(1900 + $time[5]), ($time[4]+1),$time[3],$time[2],$time[1]);
}


sub ST_Log ()
{
    my $message = shift;
    my (@time) = localtime(time());
    my ($day_str) = sprintf ("%4d-%02d-%02d %02d:%02d",(1900 + $time[5]), ($time[4]+1),$time[3],$time[2],$time[1]);
    my $logfile = "$CFG_BASE_DIR/$CFG_EXPTNAME.html";

    print "$message" if $CFG_VERBOSE;
    if (-s $logfile) {
	open ST_HTML_LOG,">>$logfile";
	if ($message =~ m/^(MODULE:).*/) {
	    print ST_HTML_LOG "<hr>\n";
	    chomp ($message);
	    print ST_HTML_LOG "<b>$message\t($day_str)</b>\n";	# Put Date information on Module headers
	} else {
	    print ST_HTML_LOG "$message";
	}
	close ST_HTML_LOG;
    } else {
	open ST_HTML_LOG,">$logfile";
	print ST_HTML_LOG "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n";
	print ST_HTML_LOG "<html>\n";
	print ST_HTML_LOG "<head>\n";
	print ST_HTML_LOG "<META HTTP-EQUIV=REFRESH CONTENT=60>\n"; # Force reloading every 60 seconds
	print ST_HTML_LOG "<title>$CFG_EXPTNAME</title>\n";
	print ST_HTML_LOG "</head>\n";
	print ST_HTML_LOG "<body BGCOLOR = \"#F0F0F5\">\n";
	print ST_HTML_LOG "<pre>\n";
	print ST_HTML_LOG "<CENTER><h1>${CFG_BASE_DIR}/${CFG_EXPTNAME}</h1></CENTER>\n";
	print ST_HTML_LOG "<CENTER> <h3>$hostname</h3></CENTER>\n";
	print ST_HTML_LOG "<hr>\n";
	if ($message =~ m/^(MODULE:).*/) {
	    chomp ($message);
	    print ST_HTML_LOG "<b>$message\t($day_str)</b>\n";	# Put Date information on Module headers
	} else {
	    print ST_HTML_LOG "$message";
	}
	close ST_HTML_LOG;
    }
}

sub ST_HTML_Print () 
{
    my $message = shift;
    my $logfile = "$CFG_BASE_DIR/$CFG_EXPTNAME.html";

    if (-s $logfile) {
	open ST_HTML_LOG,">>$logfile";
	print ST_HTML_LOG $message;
	close ST_HTML_LOG;
    } else {
	open ST_HTML_LOG,">$logfile";
	print ST_HTML_LOG "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n";
	print ST_HTML_LOG "<html>\n";
	print ST_HTML_LOG "<head>\n";
	print ST_HTML_LOG "<META HTTP-EQUIV=REFRESH CONTENT=60>\n"; # Force reloading every 60 seconds
	print ST_HTML_LOG "<title>$CFG_EXPTNAME</title>\n";
	print ST_HTML_LOG "</head>\n";
	print ST_HTML_LOG "<body BGCOLOR = \"#F0F0F5\">\n";
	print ST_HTML_LOG "<pre>\n";
	print ST_HTML_LOG "<CENTER><h1>${CFG_BASE_DIR}/${CFG_EXPTNAME}</h1></CENTER>\n";
	print ST_HTML_LOG "<CENTER> <h3>$hostname</h3></CENTER>\n";
	print ST_HTML_LOG "<hr>\n";
	print ST_HTML_LOG "$message";
	close ST_HTML_LOG;
    }

}

sub ST_LogWarning ()
{
    my $message = shift;
    my (@time) = localtime(time());
    my ($day_str) = sprintf ("%4d-%02d-%02d %02d:%02d",(1900 + $time[5]), ($time[4]+1),$time[3],$time[2],$time[1]);
    my $logfile = "$CFG_BASE_DIR/$CFG_EXPTNAME.html";

    print "WARNING: $message" if $CFG_VERBOSE;
    if (-s $logfile) {
	open ST_HTML_LOG,">>$logfile";
	print ST_HTML_LOG "WARNING: $message";
	close ST_HTML_LOG;
    } else {
	open ST_HTML_LOG,">$logfile";
	print ST_HTML_LOG "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n";
	print ST_HTML_LOG "<html>\n";
	print ST_HTML_LOG "<head>\n";
	print ST_HTML_LOG "<META HTTP-EQUIV=REFRESH CONTENT=60>\n"; # Force reloading every 60 seconds
	print ST_HTML_LOG "<title>$CFG_EXPTNAME</title>\n";
	print ST_HTML_LOG "</head>\n";
	print ST_HTML_LOG "<body BGCOLOR = \"#F0F0F5\">\n";
	print ST_HTML_LOG "<pre>\n";
	print ST_HTML_LOG "<CENTER><h1>${CFG_BASE_DIR}/${CFG_EXPTNAME}</h1></CENTER>\n";
	print ST_HTML_LOG "<CENTER> <h3>$hostname</h3></CENTER>\n";
	print ST_HTML_LOG "<hr>\n";
	print ST_HTML_LOG "WARNING: $message";
	close ST_HTML_LOG;
    }
}

sub ST_LogError ()
{
    my $message = shift;
    my (@time) = localtime(time());
    my ($day_str) = sprintf ("%4d-%02d-%02d %02d:%02d",(1900 + $time[5]), ($time[4]+1),$time[3],$time[2],$time[1]);
    my $logfile = "$CFG_BASE_DIR/$CFG_EXPTNAME.html";

    chomp ($message);		# remove \n if it exists

    print "ERROR: $message" if $CFG_VERBOSE;
    if (-s $logfile) {
	open ST_HTML_LOG,">>$logfile";
	print ST_HTML_LOG "ERROR: $message";
	close ST_HTML_LOG;
    } else {
	open ST_HTML_LOG,">$logfile";
	print ST_HTML_LOG "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n";
	print ST_HTML_LOG "<html>\n";
	print ST_HTML_LOG "<head>\n";
	print ST_HTML_LOG "<META HTTP-EQUIV=REFRESH CONTENT=60>\n"; # Force reloading every 60 seconds
	print ST_HTML_LOG "<title>$CFG_EXPTNAME</title>\n";
	print ST_HTML_LOG "</head>\n";
	print ST_HTML_LOG "<body BGCOLOR = \"#F0F0F5\">\n";
	print ST_HTML_LOG "<pre>\n";
	print ST_HTML_LOG "<CENTER><h1>${CFG_BASE_DIR}/${CFG_EXPTNAME}</h1></CENTER>\n";
	print ST_HTML_LOG "<CENTER> <h3>$hostname</h3></CENTER>\n";
	print ST_HTML_LOG "<hr>\n";
	print ST_HTML_LOG "ERROR: $message";
	close ST_HTML_LOG;
    }
}

sub ST_Converged ()
{
  my $iter = shift;
  my $logdir = shift;
  my ($l,$p,$ratio);

  # See what happened at this iteration
  $l = `grep \"overall>\" $logdir/${CFG_EXPTNAME}.${iter}-*.bw.log | awk '{X += \$3;Y += \$6} END {print Y/X}'`;

  if ($iter > 1) {
      my $tmp_iter = $iter - 1;
      # See what happened last iteration
      $p = `grep \"overall>\" $logdir/${CFG_EXPTNAME}.${tmp_iter}-*.bw.log | awk '{X += \$3;Y += \$6} END {print Y/X}'`;
      # Compute it's ratio
      $ratio = ($l-$p)/abs($p);
      &ST_Log ("\t\tRatio: $ratio\n");
  }

  # Don't even bother checking convergence until we've reached a minimum number of loops
  return 0 if ($iter < $CFG_MIN_ITERATIONS);
  return 1 if ($ratio < $CFG_CONVERGENCE_RATIO);
  return 2 if ($iter > $CFG_MAX_ITERATIONS);
}





return 1;
