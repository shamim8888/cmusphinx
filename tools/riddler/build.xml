<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="riddler" default="default" basedir="." xmlns:ear="http://www.netbeans.org/ns/j2ee-earproject/2">
    <description>Builds, tests, and runs the project riddler.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      pre-init:                 called before initialization of project properties 
      post-init:                called after initialization of project properties 
      pre-compile:              called before javac compilation 
      post-compile:             called after javac compilation 
      pre-dist:                 called before jar building 
      post-dist:                called after jar building 
      post-clean:               called after cleaning build products 
      pre-run-deploy:           called before deploying
      post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      do-dist:                jar archive building
      run:                    execution of project 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    <condition property="onOSX">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    <condition property="onWindows">
        <os family="windows"/>
    </condition>
    <condition property="onLinux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <target name="init-private" depends="init-private.win,init-private.other"/>
    <target name="init-private.win">
        <property environment="env"/>
        <property file="${basedir}/properties/${env.USERNAME}.properties"/>    
    </target>
    <target name="init-private.other">
        <property environment="env"/>
        <property file="${basedir}/properties/${env.USER}.properties"/>    
    </target>

    <property name="srcDir.dotNet" value="${basedir}/dotNet"/>
    <!-- where in the NetBeans-generated stuff is this defined as a property? -->
    <property name="distDir" value="${basedir}/dist"/>

    <fileset id="common.libs" dir="${basedir}/../common/lib">
        <include name="*.jar"/>
    </fileset>

    <taskdef resource="org/apache/ant/dotnet/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/../common/lib/ant-dotnet.jar"/>
        </classpath>
    </taskdef>

    <target name="genStubs" depends="run,genStubs.win,genStubs.other"
            description="container target for WSDL generation tasks"/>
    <target name="genStubs.win" if="onWindows">
        <property name="MSDEV.home" value="C:/tool/MSVS8"/>
        <exec command="${MSDEV.home}/SDK/v2.0/Bin/wsdl.exe">
            <arg value="/out:${srcDir.dotNet}\RiddlerStubs.cs"/>
            <arg value="/namespace:edu.cmu.sphinx.riddler"/>
            <!--<arg value="http://localhost:8080/${ant.project.name}/${ant.project.name}?wsdl"/>-->
            <arg value="http://localhost:8080/RiddlerBeanService/RiddlerBean?wsdl"/>
        </exec>
    </target>
    <target name="genStubs.other" unless="onWindows">
        <!-- TODO garrett 1/6/07: invoke Mono's WSDL-to-C# tool -->
    </target>

    <target name="test" depends="genStubs">
        <nant>
            <target name="build"/>
            <build>
                <target name="build">
                    <csc target="library" output="${distDir}/riddler-tests.dll">
                        <sources basedir="${srcDir.dotNet}">
                            <include name="**/*.cs" />
                        </sources>
                        <references>
                            <include name="${env.NUNIT_HOME}/bin/nunit.framework.dll"/>
                        </references>
                    </csc>
                </target>
            </build>
        </nant>
        <nunit>
            <testassembly name="${distDir}/riddler-tests.dll"/>
        </nunit>
    </target>

    <target name="run-client" depends="run">
        <exec command="javaws">
            <arg value="http://localhost:8080/riddler/riddler-app-client"/>
        </exec>
    </target>
</project>
